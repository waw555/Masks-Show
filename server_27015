#!/bin/bash

### BEGIN INIT INFO
# Provides:          server_27015
# Required-Start:    $syslog $local_fs $network
# Required-Stop:     $syslog $local_fs $network
# Should-Start:      $remote_fs $named
# Should-Stop:       $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start HLDS Server
# Description:       Скрипт запуска сервера CS
#
### END INIT INFO

# Source function library.
. /lib/lsb/init-functions

VERSION=1.0

#####################################################
# НАСТРОЙКА
#####################################################

SERVER_NAME="SERVER_27015" #Название сервера
screen_name=server_27015 #Название screen-сессии
path="/server/cs_27015"  #Путь до ROOT-директории сервера
hlds_ip=192.168.1.200  #IP сервера
hlds_port=27015  #Порт сервера
hlds_gametype=cstrike  #Тип игры
hlds_players=32  #Максимальное количество игроков на сервере
hlds_map=de_dust2  #Имя первоначальной карты при запуске
hlds_pid=server.pid
screen_pid=$screen_name-screen.pid
hlds_options="+noipx +sv_lan 0 -pingboost 3 +exec server.cfg +log on"  #Дополнительные параметры запуска
use_user=csadmin #Имя пользователя от которого запускается сервер
condebug=1
check_version=0
checker_command="quakestat" #Команда пакета qStat отвечающего за проверку сервера 
restarttime=10 #Время после которого сервер будет перезагружен ( выводится в чат на сервере )

#----------------------------------------------------
# Номер ядра/процессора в линуксе 
# 2х-ядерные: 0 - первое ядро, 1 - второе ядро
# 4x-ядерные: 2 - третье ядро 3 - четвертое ядро 
# И т.д. по аналогии с другими многоядерными процессорами
use_core=0
#----------------------------------------------------

#################	ВНИМАНИЕ	###################
#
# Строчки ниже, если не знаете, лучше не трогать!
#
#################	ВНИМАНИЕ	###################
RETVAL=0

succes="\033[1;32m[ ВЫПОЛНЕНО ]\033[0m"
failed="\033[1;31m [ НЕ ВЫПОЛНЕНО ]\033[0m"
status_on="\033[1;32m[ РАБОТАЕТ ]\033[0m"
status_off="\033[1;31m[ НЕ РАБОТАЕТ ]\033[0m"
title="\033[1;33m========================= ВНИМАНИЕ =========================\033[0m"

if [ "$condebug" -eq 1 ]; then 
	hlds_options2="-condebug"
fi

# Команда screen
INTR="taskset -c $use_core /usr/bin/screen -A -m -d -S $screen_name"

if [ ! -x $path/hlds_run ]; then
	printf "$title\n"
	printf "Проверьте права на выполнение \033[1;37mhlds_run \033[0m\n"
	exit 1
fi

prestart_check() {
	if [ -f $path/$hlds_pid ] && [ -f $path/$screen_pid ]; then
		ch=`ps -ef | grep SCREEN | grep $screen_name`
		if [ -n "$ch" ]; then
			printf "$title\n"
			printf "Сервер: \033[1;37m$SERVER_NAME \033[0m- уже работает \n"
			exit 1
		else 
			rm -rf $path/$screen_pid
			rm -rf $path/$hlds_pid
		fi
	fi
}

start() {
	if [ "$check_version" -eq 1 ]; then
		check_version
	fi
	# Проверка предстартовая
	prestart_check
	cd $path
	# Запускаем сервер
	$INTR ./hlds_run -game $hlds_gametype +maxplayers $hlds_players +map $hlds_map +ip $hlds_ip +port $hlds_port $hlds_options $hlds_options2 -pidfile $hlds_pid
	# Поиск и запись пидов процессов сервера и скрина в системе
	ps -ef | grep SCREEN | grep "$screen_name" | grep -v grep | awk '{ print $2}' > $path/$screen_pid
	printf "$title\n"
	printf "Запуск сервера: \033[1;37m$SERVER_NAME \033[0m\n"
	printf "Порт сервера: \033[1;37m$hlds_port\033[0m\n"
	printf "Ядро процессора: \033[1;37m$use_core\033[0m\n"
	printf "Запуск от имени пользователя: \033[1;37m$use_user\033[0m\n"
	printf "Состояние: "
	sleep 1
	if [ -f $path/$hlds_pid ] && [ -f $path/$screen_pid ]; then
		ch=`ps -ef | grep SCREEN | grep $screen_name`
		if [ -n "$ch" ]; then
			printf "$succes\n"
		else
			printf "$failed\n"
		fi
	fi
}

stop() {
	if [ "$check_version" -eq 1 ]; then
		check_version
	fi
	if [ -f $path/$hlds_pid ] && [ -f $path/$screen_pid ]; then
		# Завершаем КОРРЕКТНО остановку сервера!
		printf "$title\n" 		
		printf "Остановка сервера: \033[1;37m$SERVER_NAME \033[0m \n"
		/usr/bin/screen -R $screen_name -p 0 -X register . quit
		/usr/bin/screen -R $screen_name -p 0 -X paste .
		/usr/bin/screen -R $screen_name -p 0 -X stuff $'\n'
		sleep 1
		/usr/bin/screen -R $screen_name -X quit > /dev/null
		sleep 1
		rm -rf $path/$screen_pid
		rm -rf $path/$hlds_pid
		printf "Состояние: $succes\n"

	else
		printf "$title\n"
		printf "Сервер: \033[1;37m$SERVER_NAME\033[0m - не запущен \n"
		printf "Состояние: $failed\n"
	fi
} 

status() {
	if [ "$check_version" -eq 1 ]; then
		check_version
	fi
	printf "$title\n"
	printf "Статус сервера: \033[1;37m$SERVER_NAME\033[0m\n"
	printf "Порт сервера:\033[1;37m$hlds_port\033[0m\n"
	printf "Ядро процессора:\033[1;37m$use_core\033[0m\n"
	printf "Запущен от имени пользователя:\033[1;37m$use_user\033[0m\n"
	printf "Состояние:"
	sleep 1
	ch=`ps -ef | grep SCREEN | grep $screen_name`
	if [ -n "$ch" ]; then
		printf "$status_on\n"
	else
		printf "$status_off\n"
	fi
}

console() {
	if [ "$check_version" -eq 1 ]; then
		check_version
	fi
	if [ -f $path/$hlds_pid ] && [ -f $path/$screen_pid ]; then
		printf "$title\n"
		printf "Подключение к консоли сервера: \033[1;37m$SERVER_NAME \033[0m\n"
		printf "Для выхода из консоли, необходимо последовательно нажать \033[1;36mCtrl+A+D \033[0m\n"
		printf "Для прокрутки консоли, необходимо последовательно нажать \033[1;36mCtrl+A+Esc \033[0m\n"
		printf "Для выхода из режима прокрутки, необходимо нажать \033[1;36mEsc \033[0m\n"
		printf "Не верные действия, могут привести к поломке сервера \033[0m\n"
		concnt=10
		while [ $concnt -gt 0 ]; do
			echo -en "\rКонсоль будет запущена через $concnt сек.\n"
			let concnt=concnt-1
               		sleep 1
		done
		/usr/bin/screen -R $screen_name
		printf "$succes\n"
	else
		printf "\033[1;31mНевозможно подключиться к консоли сервера \033[1;37m$SERVER_NAME\033[1;31m - сервер не запущен \033[0m\n"
	fi
}

compile() {
	if [ "$check_version" -eq 1 ]; then
		check_version
	fi
	
	if [ ! -x $path/cstrike/addons/amxmodx/scripting/./compile.sh ]; then
		printf "$title\n"
		printf "\033[1;31mПроверьте права на выполнение \033[1;37mcompile.sh \033[0m\n"
		exit 1
	else
		if [ ! -x $path/cstrike/addons/amxmodx/scripting/amxxpc ]; then
			printf "$title\n"
			printf "\033[1;31mПроверьте права на выполнение \033[1;37mamxxpc \033[0m\n"
			exit 1
		else
	
			if [ -d $path/cstrike/addons/amxmodx/scripting/ ]; then
				printf "$title\n"
				printf "Компиляция плагинов \n"
				printf "Компилируются исходные файлы с расширением \033[1;37m.sma\033[0m находящиеся в директории \033[1;37m/addons/amxmodx/scripting/ \033[0m\n"
				printf "По завершению компиляции нажмите \033[1;37mQ\033[0m для выхода \n"
				concnt=10
				while [ $concnt -gt 0 ]; do
					echo -en "\rКомпиляция плагинов начнется через $concnt сек.\n"
					let concnt=concnt-1
							sleep 1
				done
				cd $path/cstrike/addons/amxmodx/scripting/
				./compile.sh
				printf "Состояние: $succes\n"
			else
				printf "Состояние: $failed \033[1;37mПроверьте, установлен ли AMXMODX!\033[0m\n"
			fi
		fi
	fi
}

check_version() {
	printf "$title\n"
	printf "\033[1;37mПроверка наличия обновления скрипта запуска серверов \033[0m\n"
	cd $path
	rm -f version.txt
	wget http://masks-show.ru/version.txt 1> /dev/null 2>&1
	printf "Загрузка "
	updcnt=5
	while [ $updcnt -gt 0 ]; do
		printf "."
		let updcnt=updcnt-1
       		sleep 1
	done
	sleep 1
	printf "\n"
	for ver in `cat $path/version.txt`
	do
		if [ $VERSION \< $ver ]; then
			printf "\033[1;37mДоступна новая версия скрипта запуска сервера\033[0m\n"
			printf "Текущая версия скрипта: \033[1;37m$VERSION\033[0m\n"
			printf "Новая версия скрипта: \033[1;37m$ver\033[0m\n"
			printf "Подробнее на сайте: \033[1;37m http://masks-show.ru \033[0m\n"
			printf "Ссылка на скрипт запуска серверов: \033[1;37m http://masks-show.ru \033[0m\n"
		else
			printf "Вы используете актуальную версию\n\033[1;37m[ Актуальная версия: $VERSION ] \033[0m\n"
		fi
	break
	done
	rm -f version.txt
}

check_logsize() {
	printf "$title\n"
	printf "Проверка размера \033[1;37m.log\033[0m файлов\n"
	maxlogsize=10485760
	if [ -f $path/checker.log ]; then
		sizeCheckUP=`stat -c%s $path/checker.log`
		printf "Размер \033[1;37mchecker.log\033[0m:\033[1;35m $sizeCheckUP байт\033[0m\n"
		if [ "$sizeCheckUP" -ge "$maxlogsize" ]; then
			printf "Очищаю файл \033[1;37mchecker.log\033[0m\n"
			tail -n 50 $path/checker.log > $path/checker.temp
			mv $path/checker.temp $path/checker.log  
			sleep 1
		fi
	else
		printf "Файл \033[1;37mchecker.log\033[0m отсутствует\n"
	fi
	if [ -f $path/cstrike/qconsole.log ]; then
		sizeQconsole=`stat -c%s $path/cstrike/qconsole.log`
		printf "Размер \033[1;37mqconsole.log\033[0m: \033[1;35m $sizeQconsole байт\033[0m\n"
		if [ "$sizeQconsole" -ge "$maxlogsize" ]; then
			printf "Очищаю файл \033[1;37mqconsole.log\033[0m\n"
			tail -n 50 $path/cstrike/qconsole.log >  $path/cstrike/qconsole.temp
			mv  $path/cstrike/qconsole.temp  $path/cstrike/qconsole.log
			sleep 1
		fi
	else 
		printf "Файл \033[1;37mqconsole.log\033[0m отсутствует\n"
	fi
}

checker() {
	checktag="\033[1;33m[ПРОВЕРКА СЕРВЕРОВ]\033[0m"
	checkresponse=`$checker_command -P -a2s $hlds_ip:$hlds_port | grep response`
	if [ -n "$checkresponse" ]; then
		printf "$checktag \033[1;37m $SERVER_NAME \033[0m \033[31m*[НЕТ ОТВЕТА]*\033[0m\n"
		# Записываем в логи
		cd $path
		time=`date +%X`
		date=`date +%D`
		inlog=`$checker_command -P -a2s $hlds_ip:$hlds_port | grep response`
		printf "[$time - $date] *[НЕТ ОТВЕТА]* $inlog\n" >> checker.log
		stop
		sleep 2
		start
		sleep 1
		echo ========================= ВНИМАНИЕ ========================= >> checker.log
		printf "Запуск сервера: $SERVER_NAME" >> checker.log
		ch=`ps -ef | grep SCREEN | grep $screen_name`
		if [ -n "$ch" ]; then
			printf " [ ВЫПОЛНЕНО ]\n" >> checker.log
		else
			printf " [ НЕ ВЫПОЛНЕНО ]\n" >> checker.log
		fi
		echo ============================================================ >> checker.log
		exit 1
	fi
	checkdown=`$checker_command -P -a2s $hlds_ip:$hlds_port | grep DOWN`
	if [ -n "$checkdown" ]; then
		printf "$checktag \033[1;37m $SERVER_NAME \033[0m \033[31m*[НЕ РАБОТАЕТ]*\033[0m\n"
		# Записываем в логи
		cd $path
		time=`date +%X`
		date=`date +%D`
		inlog=`$checker_command -P -a2s $hlds_ip:$hlds_port | grep DOWN`
		printf "[$time - $date] *[НЕ РАБОТАЕТ]* $inlog\n" >> checker.log
		stop
		sleep 2
		start
		sleep 1
		echo ========================= ВНИМАНИЕ ========================= >> checker.log
		printf "Запуск сервера: $SERVER_NAME " >> checker.log
		ch=`ps -ef | grep SCREEN | grep $screen_name`
		if [ -n "$ch" ]; then
			printf "[ ВЫПОЛНЕНО ]\n" >> checker.log
		else
			printf "[НЕ ВЫПОЛНЕНО]\n" >> checker.log
		fi
		echo ----------------------------------------- >> checker.log
		exit 1
	fi
	checkup=`$checker_command -P -a2s $hlds_ip:$hlds_port | grep cstrike`
	if [ -n "$checkup" ]; then
		printf "$checktag \033[1;37m $SERVER_NAME \033[0m \033[31m*[ РАБОТАЕТ ]*\033[0m\n"
		cd $path
		time=`date +%X`
		date=`date +%D`
		inlog=`quakestat -P -a2s $hlds_ip:$hlds_port | grep cstrike`
		printf "[$time - $date] *[ РАБОТАЕТ ]* $inlog\n" >> checker.log
		exit 1
	fi
}

prerestart() {
	if [ -f $path/$hlds_pid ] && [ -f $path/$screen_pid ]; then
		printf "$title\n"
		printf "Начинается отсчет до перезагрузки сервера: \033[1;37m$SERVER_NAME \033[0m\n"
		cnt=$restarttime
		while [ $cnt -gt 0 ]; do
                	/usr/bin/screen -R $screen_name -p 0 -X register . "say Сервер будет перезагружен через $cnt сек.!"
                	/usr/bin/screen -R $screen_name -p 0 -X paste .
                	/usr/bin/screen -R $screen_name -p 0 -X stuff $'\n'
			echo -en "\rПерезагрузка сервера через $cnt сек."
			let cnt=cnt-1
               		sleep 1
		done

                /usr/bin/screen -R $screen_name -p 0 -X register . "say ============================================="
                /usr/bin/screen -R $screen_name -p 0 -X paste .
                /usr/bin/screen -R $screen_name -p 0 -X stuff $'\n'

                /usr/bin/screen -R $screen_name -p 0 -X register . "say [ ПЕРЕЗАГРУЗКА СЕРВЕРА ]"
                /usr/bin/screen -R $screen_name -p 0 -X paste .
               	/usr/bin/screen -R $screen_name -p 0 -X stuff $'\n'

                /usr/bin/screen -R $screen_name -p 0 -X register . "say ============================================="
                /usr/bin/screen -R $screen_name -p 0 -X paste .
                /usr/bin/screen -R $screen_name -p 0 -X stuff $'\n'

		printf "$succes\n"
        fi
       
}

case "$1" in
	start)
		start
	;;
	stop)
		stop
	;;
	restart)
                prerestart
                sleep 2
                stop
                sleep 2
                start
	;;
	status)
		status
	;;
	console)
		console
	;;
	compile)
		compile
	;;
	update)
		check_version
	;;
	checker)
		checker
	;;
	logsize)
		check_logsize
	;;
	*)
	echo "Используйте следующие команды: $0 {start|stop|restart|status|console|compile|update|checker|logsize}"
	exit 1
esac
exit 0